{"version":3,"file":"main.js","sources":["../src/global.ts","../src/protos.ts","../src/task/Task.ts","../src/task/instances/moveTo.ts","../src/task/instances/harvest.ts","../src/task/tasks.ts","../src/creep/creep.ts","../src/task/taskLog.ts","../src/struct/struct.ts","../src/struct/instance/spawn.ts","../src/struct/structs.ts","../src/agent/agent.ts","../src/agent/instance/praetor.ts","../src/agent/agents.ts","../src/task/taskFlow.ts","../src/cache/cache.ts","../src/memory/mem.ts","../src/main.ts"],"sourcesContent":["/**\r\n *  Global function/constants \r\n */\r\n\r\ndeclare function getObjectInCache(isId: boolean, ref: Id<_HasId> | MemRef): any;\r\ndeclare function derefMem(ref: MemRef): any;\r\ndeclare function getCreepName(roomName: string, role: string): string;\r\n\r\n// Ref can be either Id<_HasId> or MemRef type\r\nglobal.getObjectInCache = function(isId: boolean, ref: any): any {\r\n    if (isId) {\r\n        let obj = global.cache.log[ref];\r\n        if (!obj) {\r\n            console.log(\"[WARNING] Function 'getObjectInCache()': object not found in cache\");\r\n            return null;\r\n        } else {\r\n            return obj;\r\n        }\r\n    } else {\r\n        let itr = global.cache;\r\n        for (let key of ref) {\r\n            itr = itr[key];\r\n        }\r\n        return itr;\r\n    }\r\n    \r\n}\r\n\r\nglobal.derefMem = function(ref: MemRef): any {\r\n    let itr = Memory;\r\n    for (let key of ref) {\r\n        itr = itr[key];\r\n    }\r\n    return itr;\r\n}\r\n\r\n// Generate an unique name for creep\r\nglobal.getCreepName = function(roomName: string, role: string): string {\r\n    let record = Memory.room[roomName].data.nameIdx[role];\r\n    let idx = 0;\r\n    while (true) {\r\n        idx += 1;\r\n        if (record.indexOf(idx) == -1) {\r\n            record.push(idx);\r\n            return roomName + '-' + role + idx.toString();\r\n        }\r\n    }\r\n}\r\n\r\n","/**\r\n *  Prototype classes\r\n */\r\n\r\n// For game objects (which have fixed memory space)\r\nexport abstract class ObjectProto {\r\n\r\n    // Write back latest data to memory\r\n    abstract wb();\r\n\r\n    // Unzip and load the object with package data\r\n    abstract load();\r\n\r\n    // Wrapper function\r\n    abstract exe();\r\n}\r\n\r\n// For meta data (which does not have fixed memory space)\r\nexport abstract class DataProto {\r\n\r\n    // Compress data to a compact package (to be stored in memory)\r\n    abstract zip(): any;\r\n\r\n    // Unzip and load the object with package data\r\n    abstract unzip(pkg: any);\r\n}","import {DataProto} from '../protos';\r\nimport {Tasks} from './tasks';\r\n\r\nexport interface TaskMemory {\r\n    t: string;\r\n    oi: boolean;\r\n    or: MemRef | Id<_HasId>;\r\n    ti: string;\r\n    i: Id<_HasId>;\r\n    d: {[key: string]: any};\r\n    c: TaskMemory;\r\n}\r\n\r\nexport abstract class Task extends DataProto {\r\n    abstract readonly type: string;\r\n    taskId: string;\r\n    protected _ownerIsAgent: boolean;\r\n    protected _ownerRef: MemRef | Id<_HasId>;\r\n    protected _owner: any;\r\n    protected _targetId: Id<_HasId>;\r\n    protected _target: any;     // Caching target object\r\n    data: {[key: string]: any};\r\n    child: Task | null;\r\n    \r\n    constructor(isInit: boolean, \r\n        opt?: {\r\n            pkg?: TaskMemory, \r\n            taskId?: string,\r\n            owner?: {\r\n                isAgent: boolean,\r\n                ref: MemRef | Id<_HasId>\r\n            } \r\n            target?: any\r\n        }\r\n    ) {\r\n        super();\r\n        if (isInit) {\r\n            if(opt.owner) {\r\n                this._ownerIsAgent = opt.owner.isAgent;\r\n                this._ownerRef = opt.owner.ref;\r\n                this._owner = null;\r\n            } else {\r\n                this._ownerIsAgent = false;\r\n                this._ownerRef = null;\r\n                this._owner = null\r\n            }\r\n            this.taskId = opt.taskId;\r\n            this.target = opt.target;\r\n            this.data = {};\r\n            this.child = null;\r\n        } else {\r\n            this.unzip(opt.pkg);\r\n        }\r\n    }\r\n\r\n    /*----------------------- Constant ----------------------*/\r\n\r\n    readonly RET_OK = 0;            // Task is being executed normally\r\n    readonly RET_FINISH = 1;        // Task finishes normally\r\n    readonly RET_HALT = 2;          // Task finishes abnormally\r\n\r\n    /*-------------------- Getter/Setter --------------------*/\r\n\r\n    get target(): any {\r\n        if (!this._target && this._targetId) {\r\n            this._target = getObjectInCache(true, this._targetId);\r\n        }\r\n        return this._target;\r\n    }\r\n    set target(tar: any) {\r\n        this._targetId = (tar) ? null : tar.obj.id;\r\n        this._target = tar;\r\n    }\r\n\r\n    get owner(): any {\r\n        if (!this._owner && this._ownerRef) {\r\n            this._owner = getObjectInCache(!this._ownerIsAgent, this._ownerRef);\r\n        }\r\n        return this._owner;\r\n    }\r\n\r\n    /*------------------------ Method -----------------------*/\r\n\r\n    zip(): TaskMemory {\r\n        return {\r\n            t: this.type,\r\n            oi: this._ownerIsAgent,\r\n            or: this._ownerRef,\r\n            ti: this.taskId,\r\n            i: this._targetId,\r\n            d: this.data,\r\n            c: (this.child == null) ? null : this.child.zip()\r\n        }\r\n    }\r\n\r\n    // Note: proto task does not unzip _child\r\n    unzip(pkg: TaskMemory) {\r\n        this._ownerIsAgent = pkg.oi;\r\n        this._ownerRef = pkg.or;\r\n        this._owner = null;\r\n        this.taskId = pkg.ti;\r\n        this._targetId = pkg.i;\r\n        this._target = null;\r\n        this.data = pkg.d;\r\n        this.child = Tasks.buildTask(pkg.c);\r\n    }\r\n\r\n    // Wrapper function\r\n    exe(creep: Creep): number {\r\n        if (this.child) {\r\n            switch (this.child.exe(creep)) {\r\n                case this.RET_OK: {\r\n                    return this.RET_OK;\r\n                }\r\n                case this.RET_FINISH: {\r\n                    this.child = null;\r\n                    break;\r\n                }\r\n                case this.RET_HALT: {\r\n                    this.child = null;\r\n                    return this.RET_HALT;\r\n                }\r\n                default: {break;}\r\n            }\r\n        }\r\n        return this.work(creep);\r\n    }\r\n\r\n    // Check validity and do actual work\r\n    abstract work(creep: Creep): number;\r\n\r\n    // Provid a value that how good is it to select input creep to perform the task (bigger means better) \r\n    abstract eval(creep: Creep): number;\r\n}","import {Task, TaskMemory} from \"../Task\";\r\n\r\nexport class TaskMoveTo extends Task {\r\n    readonly type: string = 'moveTo';\r\n\r\n    constructor(isInit: boolean, \r\n        opt: {\r\n            pkg?: TaskMemory, \r\n            taskId?: string,\r\n            owner?: {\r\n                isAgent: boolean,\r\n                ref: MemRef | Id<_HasId>\r\n            }\r\n            pos?: RoomPosition, \r\n            range?: number\r\n        }\r\n    ) {\r\n        super(isInit, opt);    // Just let fields remains undefined\r\n        if (isInit) {\r\n            this.data.pos = opt.pos;\r\n            this.data.range = opt.range;\r\n        }\r\n    }\r\n\r\n    work(creep: Creep): number {\r\n        // Check object\r\n        if (!creep) {\r\n            return this.RET_HALT;\r\n        }\r\n        // Check terminate condition\r\n        let pos = new RoomPosition(this.data.pos.x, this.data.pos.y, this.data.pos.roomName);\r\n        if (creep.pos.inRangeTo(pos, this.data.range)) {\r\n            return this.RET_FINISH;\r\n        }\r\n        // Move\r\n        creep.say('MoveTo');\r\n        creep.moveTo(pos, {reusePath: 5});\r\n        return this.RET_OK;\r\n    }\r\n\r\n    eval(creep: Creep): number {\r\n        return -creep.pos.getRangeTo(this.data.pos);\r\n    }\r\n}","import {Task, TaskMemory} from \"../Task\";\r\nimport {Tasks} from \"../tasks\";\r\n\r\nexport class TaskHarvest extends Task {\r\n    readonly type: string = 'harvest';\r\n\r\n    readonly MOVE_TO_SOURCE = 0;\r\n    readonly HARVEST = 1;\r\n    readonly MOVE_TO_TARGET = 2;\r\n    readonly STORE = 3;\r\n\r\n    constructor(isInit: boolean, \r\n        opt?: {\r\n            pkg?: TaskMemory, \r\n            taskId?: string,\r\n            owner?: {\r\n                isAgent: boolean,\r\n                ref: MemRef | Id<_HasId>\r\n            }\r\n            target?: Source | Mineral | Deposit, \r\n            srcType?: string,\r\n            isOC?: boolean,\r\n            amount?: number\r\n        }\r\n    ) {\r\n        super(isInit, opt);\r\n        if (isInit) {\r\n            this.data.srcType = opt.srcType;\r\n            this.data.isOC = opt.isOC;\r\n            this.data.stage = this.MOVE_TO_SOURCE;\r\n            if (opt.amount) {\r\n                this.data.tarAmount = opt.amount;   // Target amount\r\n                this.data.curAmount = 0;    // Finished amount\r\n                this.data.preSt = 0;       // Amount of resource stored in creep in last tick \r\n                this.data.isTr = false;     // True if creep perform a transfer in last tick\r\n            }\r\n        }\r\n    }\r\n\r\n    work(creep: Creep): number {\r\n        // Check object\r\n        if (!creep) {\r\n            return this.RET_HALT;\r\n        }\r\n        // Check target\r\n        if (!this.target) {\r\n            return this.RET_HALT;\r\n        }\r\n        // Update process\r\n        if (this.data.isTr) {\r\n            this.data.isTr = false;\r\n            this.data.curAmount += this.data.preSt - creep.store[this.data.srcType];\r\n        }\r\n        // Check terminate condition\r\n        if (this.data.tarAmount) {\r\n            if (this.data.curAmount >= this.data.tarAmount) {\r\n                return this.RET_FINISH;\r\n            }\r\n        }\r\n        // Harvest\r\n        creep.say('Harvest');\r\n        if (this.data.isOC) {\r\n            // Move to target\r\n            if (!creep.pos.inRangeTo(this.target, 0)) {\r\n                this.child = Tasks.moveTo(null, null, this.target.pos, 0);\r\n                return this.RET_OK;\r\n            }\r\n            // Keep harvesting\r\n            creep.harvest(this.target);\r\n        } else {\r\n            switch (this.data.stage) {\r\n                case this.MOVE_TO_SOURCE: {\r\n                    // If half empty, go to source, otherwise go to owner first\r\n                    if (creep.store[this.data.srcType]/creep.store.getCapacity(this.data.srcType) < 0.5) {\r\n                        if (!creep.pos.inRangeTo(this.target, 1)) {\r\n                            this.child = Tasks.moveTo(null, null, this.target.pos, 1);\r\n                            return this.RET_OK;\r\n                        }\r\n                        this.data.stage = this.HARVEST;\r\n                    } else {\r\n                        this.data.stage = this.MOVE_TO_TARGET;\r\n                    }\r\n                    break;\r\n                }\r\n                case this.HARVEST: {\r\n                    if (creep.store.getFreeCapacity() > 0) {\r\n                        creep.harvest(this.target);\r\n                        return this.RET_OK;\r\n                    }\r\n                    this.data.stage = this.MOVE_TO_TARGET;\r\n                    break;\r\n                }\r\n                case this.MOVE_TO_TARGET: {\r\n                    if (!creep.pos.inRangeTo(this.owner, 1)) {\r\n                        this.child = Tasks.moveTo(null, null, this.owner.pos, 1);\r\n                        return this.RET_OK;\r\n                    }\r\n                    this.data.stage = this.STORE;\r\n                    break;\r\n                }\r\n                case this.STORE: {\r\n                    creep.transfer(this.owner, this.data.srcType);\r\n                    this.data.stage = this.MOVE_TO_SOURCE;\r\n                    this.data.preSt = creep.store[this.data.srcType];\r\n                    this.data.isTr = true;\r\n                    break;\r\n                }\r\n            }\r\n            return this.RET_OK;\r\n        }\r\n    }\r\n\r\n    eval(creep: Creep): number {\r\n        if (creep.store[this.data.srcType]/creep.store.getCapacity(this.data.srcType) < 0.5) {\r\n            return -creep.pos.getRangeTo(this.target);\r\n        } else {\r\n            return -creep.pos.getRangeTo(this.owner);\r\n        }\r\n    }\r\n}","import {Task, TaskMemory} from './task';\r\nimport {TaskMoveTo} from './instances/moveTo';\r\nimport {TaskHarvest} from './instances/harvest';\r\n\r\nexport class Tasks {\r\n\r\n    /**\r\n     *  owner: task owner, can be null\r\n     *  taskId: unique task identifer of task publisher\r\n     *  pos: position to move to\r\n     *  range: range of valid area\r\n     */\r\n    static moveTo(owner: {isAgent: boolean, ref: MemRef | Id<_HasId>}, taskId: string, pos: RoomPosition, range: number): Task {\r\n        return new TaskMoveTo(true, {owner: owner, taskId: taskId, pos: pos, range: range});\r\n    }\r\n\r\n    /**\r\n     *  owner: task owner, can be null\r\n     *  taskId: unique task identifer of task publisher\r\n     *  target: structure to store energy/resource\r\n     *  srcType: type of resource\r\n     *  isOC: true - the creep will stands on a container and harvest continuously\r\n     */\r\n    static harvest(owner: {isAgent: boolean, ref: MemRef | Id<_HasId>}, taskId: string, target: Source | Mineral | Deposit, srcType: string, isOC: boolean, amount?: number): Task {\r\n        return new TaskHarvest(true, {owner: owner, taskId: taskId, target: target, srcType: srcType, isOC: isOC, amount: amount});\r\n    }\r\n\r\n    /**\r\n     *  pkg: zipped package in memory\r\n     */\r\n    static buildTask(pkg: any): Task {\r\n        if (!pkg) {\r\n            return null;\r\n        }\r\n        switch (pkg.t) {\r\n            case 'moveTo': {\r\n                return new TaskMoveTo(false, {pkg: pkg});\r\n            }\r\n            case 'harvest': {\r\n                return new TaskHarvest(false, {pkg: pkg});\r\n            }\r\n            default: {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n}","import {ObjectProto} from '../protos';\r\nimport {Task, TaskMemory} from '../task/Task';\r\nimport {Tasks} from '../task/tasks';\r\n\r\n// export interface CreepMemory {\r\n//     r: string;\r\n//     t: TaskMemory;\r\n// }\r\n\r\nexport class CreepWrapper extends ObjectProto { \r\n    protected obj: any;\r\n    protected role: string;\r\n    protected task: Task;\r\n\r\n    // Role must be provided at first instantiation\r\n    constructor(isInit: boolean, id: Id<_HasId>, \r\n        opt?: {role: string}) \r\n    {\r\n        super();\r\n        this.obj = Game.getObjectById(id);\r\n        if (isInit) {\r\n            this.role = opt.role;\r\n            this.task = null;\r\n            this.wb();\r\n        } else {\r\n            this.load();\r\n        }\r\n    }\r\n\r\n    /*------------------------ Method -----------------------*/\r\n\r\n    wb() {\r\n        this.obj.memory = {\r\n            r: this.role,\r\n            t: (this.task) ? this.task.zip() : null\r\n        }\r\n    }\r\n\r\n    load() {\r\n        this.role = this.obj.memory.r;\r\n        this.task = Tasks.buildTask(this.obj.memory.t);\r\n    }\r\n\r\n    // Execute task if any\r\n    work() {\r\n        if (this.task) {\r\n            let ret = this.task.exe(this.obj);\r\n            if (ret == this.task.RET_FINISH) {\r\n                this.task.owner.taskLog.finishTask(this.task.taskId);\r\n                this.task = null;\r\n            } else if (ret == this.task.RET_HALT) {\r\n                this.task.owner.taskLog.haltTask(this.task.taskId);\r\n                this.task = null;\r\n            } else {}\r\n        }\r\n    }\r\n\r\n    // Wrapper function\r\n    exe() {\r\n        // TODO: Check lifetime\r\n        // TODO: Check hit\r\n        this.work();\r\n    }\r\n}","/**\r\n *  Every task publisher should maintain a task log \r\n */\r\n\r\nimport {DataProto} from \"../protos\";\r\n\r\nexport interface TaskLogMemory {\r\n    [id: string]: {\r\n        state: number;\r\n        data: {[name: string]: any};\r\n    };\r\n}\r\n\r\nexport class TaskLog extends DataProto {\r\n    log: any; \r\n\r\n    readonly STATE_UNFINISH = 0;\r\n    readonly STATE_FINISH = 1;\r\n    readonly STATE_HALT = 2;\r\n    \r\n    constructor(isInit: boolean, pkg?: TaskLogMemory) {\r\n        super();\r\n        if (isInit) {\r\n            this.log = {};\r\n        } else {\r\n            this.unzip(pkg);\r\n        }\r\n    }\r\n\r\n    zip(): any {\r\n       return this.log;\r\n    }\r\n\r\n    unzip(pkg: any) {\r\n        this.log = {};\r\n        for (let id in pkg) {\r\n            this.log[id] = pkg[id];\r\n        }\r\n    }\r\n\r\n    addTask(id: string, data: any) {\r\n        this.log[id] = {\r\n            state: this.STATE_UNFINISH,\r\n            data: data\r\n        };\r\n    }\r\n\r\n    haltTask(id: string) {\r\n        this.log[id].state = this.STATE_HALT;\r\n    }\r\n\r\n    finishTask(id: string) {\r\n        this.log[id].state = this.STATE_FINISH;\r\n    }\r\n\r\n    isTaskHalt(id: string) {\r\n        return this.log[id].state == this.STATE_HALT;\r\n    }\r\n\r\n    isTaskFinish(id: string) {\r\n        return this.log[id].state == this.STATE_FINISH;\r\n    }\r\n\r\n    delTask(id: string) {\r\n        delete this.log[id];\r\n    }\r\n\r\n    cleanAll() {\r\n        this.log = {};\r\n    }\r\n}","import {ObjectProto} from '../protos'\r\nimport {TaskLog, TaskLogMemory} from '../task/taskLog';\r\n\r\nexport interface StructureMemory {\r\n    i: Id<_HasId>;\r\n    t: any;\r\n    d: {[key: string]: any};\r\n}\r\n\r\nexport class StructureWrapper extends ObjectProto {\r\n    protected _ref: MemRef;\r\n    protected _roomTaskFlow: any;\r\n    obj: any;\r\n    taskLog: TaskLog;\r\n    data: {[key: string]: any};\r\n\r\n    // Id and type must be provide at first instantiation\r\n    constructor(isInit: boolean, ref: MemRef,\r\n        opt?: {id?: Id<_HasId>}) \r\n    {\r\n        super();\r\n        this._ref = ref;\r\n        this._roomTaskFlow = null;\r\n        if (isInit) {\r\n            this.obj = Game.getObjectById(opt.id);\r\n            this.taskLog = new TaskLog(true);\r\n            this.data = {};\r\n            this.wb();\r\n        } else {\r\n            this.load();\r\n        }\r\n    }\r\n\r\n    /*-------------------- Getter/Setter --------------------*/\r\n\r\n    get roomTaskFlow(): any {\r\n        if (!this._roomTaskFlow) {\r\n            this._roomTaskFlow = getObjectInCache(false, this._ref.slice(0, -3)).taskFlow;\r\n        }\r\n        return this._roomTaskFlow;\r\n    }\r\n\r\n    /*------------------------ Method -----------------------*/\r\n\r\n    wb() {\r\n        let mem = derefMem(this._ref);\r\n        mem.i = this.obj.id;\r\n        mem.t = this.taskLog.zip();\r\n        mem.d = this.data;\r\n    }\r\n\r\n    load() {\r\n        let mem = derefMem(this._ref);\r\n        this.obj = Game.getObjectById(mem.i);\r\n        this.taskLog = new TaskLog(false, mem.t);\r\n        this.data = mem.d;\r\n    }\r\n\r\n    // Check hit, publish task if necessary\r\n    checkHit() {}\r\n\r\n    // Do work, publish task if necessary\r\n    work() {}\r\n\r\n    // Wrapper function\r\n    exe() {\r\n        this.checkHit();\r\n        this.work();\r\n    }\r\n}","import {StructureWrapper} from \"../struct\";\r\nimport {Tasks} from \"../../task/tasks\";\r\nimport {CreepWrapper} from \"../../creep/creep\";\r\n\r\nexport interface SpawnRequest {\r\n    n: string;      // Name\r\n    r: string;      // Role\r\n    b: {[name: string]: number};   // Body\r\n    ti: number;     // Time\r\n    e: number;      // Energy\r\n}\r\n\r\nexport class SpawnWrapper extends StructureWrapper {\r\n\r\n    constructor(isInit: boolean, ref: MemRef,\r\n        opt?: {id?: Id<_HasId>})\r\n    {\r\n        super(isInit, ref, opt);\r\n        if (isInit) {\r\n            this.data.queue = [];\r\n            this.data.rTime = 0;   // Remaining time to finish all spawn request\r\n            this.data.curReq = null;\r\n            this.wb();\r\n        }\r\n    }\r\n\r\n    addSpawnReq(role: string, body: {[name: string]: number}) {\r\n        let time = 0;\r\n        let energy = 0;\r\n        for (let i in body) {\r\n            time += body[i] * 3;\r\n            switch (i) {\r\n                case TOUGH: {\r\n                    energy += body[i] * 10;\r\n                    break;\r\n                }\r\n                case CARRY: {\r\n                    energy += body[i] * 50;\r\n                    break;\r\n                }\r\n                case WORK: {\r\n                    energy += body[i] * 100;\r\n                    break;\r\n                }\r\n                case ATTACK: {\r\n                    energy += body[i] * 80;\r\n                    break;\r\n                }\r\n                case RANGED_ATTACK: {\r\n                    energy += body[i] * 150;\r\n                    break;\r\n                }\r\n                case HEAL: {\r\n                    energy += body[i] * 250;\r\n                    break;\r\n                }\r\n                case CLAIM: {\r\n                    energy += body[i] * 600;\r\n                    break;\r\n                }\r\n                case MOVE: {\r\n                    energy += body[i] * 50;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.data.queue.push({n: null, r: role, b: body, ti: time, e: energy});\r\n        this.data.rTime += time;\r\n    }\r\n\r\n    protected spawn(req: SpawnRequest): number {\r\n        let body = [];\r\n        for (let bodyType of [TOUGH, CARRY, WORK, ATTACK, RANGED_ATTACK, HEAL, CLAIM, MOVE]) {\r\n            if (req.b[bodyType]) {\r\n                for (let i=0; i<req.b[bodyType]; i++) {\r\n                    body.push(bodyType);\r\n                }\r\n            }\r\n        }  \r\n        return this.obj.spawnCreep(body, req.n);\r\n    }\r\n\r\n    work() {\r\n        if (this.taskLog.log['harvest']) {\r\n            if (this.taskLog.isTaskHalt('harvest') || this.taskLog.isTaskFinish('harvest')) {\r\n                this.taskLog.delTask('harvest');\r\n            }\r\n        } else {\r\n            // Require energy\r\n            let free = this.obj.store.getFreeCapacity(RESOURCE_ENERGY);\r\n            if (free > 0) {\r\n                let taskId = 'harvest';\r\n                let task = Tasks.harvest(\r\n                    {isAgent: false, ref: this.obj.id}, \r\n                    taskId, \r\n                    this.obj.room.find(FIND_SOURCES)[0],\r\n                    RESOURCE_ENERGY,\r\n                    false,\r\n                    free\r\n                )\r\n                this.taskLog.addTask(taskId, null)\r\n                this.roomTaskFlow['worker'].pubTask(task, 1);\r\n            }\r\n        }\r\n        if (!this.obj.spawning) {\r\n            // Record the spawned creep\r\n            // console.log('[1]');\r\n            if (this.data.curReq) {\r\n                // console.log('[2]');\r\n                let creep = Game.creeps[this.data.curReq.n];\r\n                this.roomTaskFlow[this.data.curReq.r].addReceiver(new CreepWrapper(true, creep.id, {role: this.data.curReq.r}));\r\n                this.data.rTime -= this.data.curReq.ti;\r\n                this.data.curReq = null;\r\n            }\r\n            // Spawn a creep\r\n            let idx = -1;\r\n            for (let i=0; i<this.data.queue.length; i++) {\r\n                let req = this.data.queue[i];\r\n                if (req.e > this.obj.room.energyAvailable) {\r\n                    continue;\r\n                }\r\n                req.n = getCreepName(this.obj.room.name, req.r);\r\n                this.spawn(req)\r\n                this.data.curReq = req;\r\n                idx = i;\r\n                break;\r\n            }\r\n            // Delete request in the queue\r\n            if (idx != -1) {\r\n                this.data.queue.splice(idx, 1);\r\n            }\r\n        }\r\n        \r\n    }\r\n}","import {StructureWrapper} from \"./struct\";\r\nimport {SpawnWrapper} from \"./instance/spawn\";\r\n\r\nexport class Structs {\r\n\r\n    static createStruct(ref: MemRef, obj: any): StructureWrapper {\r\n        let id = obj.id;\r\n        let type = obj.structureType;\r\n        switch (type) {\r\n            case STRUCTURE_SPAWN: {\r\n                return new SpawnWrapper(true, ref, {id: id});\r\n            }\r\n            default: {\r\n                return new StructureWrapper(true, ref, {id: id});\r\n            }\r\n        }\r\n    }\r\n\r\n    static buildStruct(ref: MemRef, type: string): StructureWrapper{\r\n        switch (type) {\r\n            case STRUCTURE_SPAWN: {\r\n                return new SpawnWrapper(false, ref);\r\n            }\r\n            default: {\r\n                return new StructureWrapper(false, ref);\r\n            }\r\n        }\r\n    }\r\n}","import {ObjectProto} from '../protos';\r\nimport {TaskLog, TaskLogMemory} from '../task/taskLog';\r\n\r\nexport interface AgentMemory {\r\n    t: string;\r\n    r: string;\r\n    tl: TaskLogMemory;\r\n    s: number;\r\n    d: {[name:string]: any}\r\n}\r\n\r\nexport abstract class Agent extends ObjectProto {\r\n    abstract readonly type: string;\r\n    protected _ref: MemRef;\r\n    protected _roomName: string;\r\n    protected _taskFlow: any;\r\n    room: any;\r\n    taskLog: TaskLog;\r\n    state: number;\r\n    data: {[name:string]: any}\r\n\r\n    constructor(isInit: boolean, ref: MemRef, roomName?: string) {\r\n        super();\r\n        this._ref = ref;\r\n        this._taskFlow = null;\r\n        if (isInit) {\r\n            this._roomName = roomName;\r\n            this.room = (roomName) ? Game.rooms[roomName] : null;\r\n            this.taskLog = new TaskLog(true);\r\n            this.data = {};\r\n        } else {\r\n            this.load();\r\n        }\r\n    }\r\n\r\n    /*-------------------- Getter/Setter --------------------*/\r\n\r\n    get taskFlow(): any {\r\n        if (!this._taskFlow) {\r\n            this._taskFlow = getObjectInCache(false, this._ref.slice(0, -2)).taskFlow;\r\n        }\r\n        return this._taskFlow;\r\n    }\r\n\r\n    /*------------------------ Method -----------------------*/\r\n\r\n    wb() {\r\n        let mem = derefMem(this._ref);\r\n        mem.t = this.type;\r\n        mem.r = this._roomName;\r\n        mem.tl = this.taskLog.zip();\r\n        mem.s = this.state;\r\n        mem.d = this.data;\r\n    }\r\n\r\n    load() {\r\n        let mem = derefMem(this._ref);\r\n        this._roomName = mem.r;\r\n        this.room = (mem.r) ? Game.rooms[mem.r] : null;\r\n        this.taskLog = new TaskLog(false, mem.tl); \r\n        this.state = mem.s;\r\n        this.data = mem.d;\r\n    }\r\n\r\n}","import {Agent} from \"../agent\";\r\nimport {Tasks} from \"../../task/tasks\";\r\n\r\nexport class AgentPraetor extends Agent {\r\n    readonly type = 'praetor';\r\n    controller: any;\r\n    protected _spawns: Array<any>;\r\n\r\n    readonly STATE_RCL0 = 0;\r\n    readonly STATE_RCL1 = 1;\r\n    readonly STATE_RCL2 = 2;\r\n    readonly STATE_RCL3 = 3;\r\n    readonly STATE_RCL4 = 4;\r\n    readonly STATE_RCL5 = 5;\r\n    readonly STATE_RCL6 = 6;\r\n    readonly STATE_RCL7 = 7;\r\n    readonly STATE_RCL8 = 8;\r\n\r\n    constructor(isInit: boolean, ref: MemRef, roomName?: string) {\r\n        super(isInit, ref, roomName);\r\n        this._spawns = null;\r\n        if (isInit) {\r\n            this.controller = this.room.controller;\r\n            this.data.ctrId = this.room.controller.id;\r\n            this.data.spawnLog = {};\r\n            this.state = this.STATE_RCL0;\r\n            this.wb();\r\n        } else {\r\n            this.controller = Game.getObjectById(this.data.ctrId);\r\n        }\r\n    }\r\n\r\n    get spawns(): any {\r\n        if (!this._spawns) {\r\n            this._spawns = getObjectInCache(false, this._ref.slice(0, -2)).struct.spawn;\r\n        }\r\n        return this._spawns;\r\n    }\r\n\r\n    printMsg(msg: string) {\r\n        console.log('[MESSAGE] Praetor (room ' + this.room.name + '): ' + msg);\r\n    }\r\n\r\n    spawnCreep(role: string, body: {[name: string]: number}) {\r\n        let idx = -1;\r\n        let minTime = Infinity;\r\n        for (let i=0; i<this.spawns.length; i++) {\r\n            if (this.spawns[i].data.rTime < minTime) {\r\n                idx = i;\r\n                minTime = this.spawns[i].data.rTime;\r\n            }\r\n        }\r\n        if (idx != -1) {\r\n            this.spawns[idx].addSpawnReq(role, body);\r\n        }\r\n    }\r\n\r\n    exe() {\r\n        // console.log('state: ', this.state);\r\n        switch (this.state) {\r\n            case this.STATE_RCL0: {\r\n                if (this.controller.level == 1) {\r\n                    this.state = this.STATE_RCL1;\r\n                    this.printMsg('RCL reaches level 1');\r\n                }\r\n                break;\r\n            }\r\n            case this.STATE_RCL1: {\r\n                if (!this.data.spawnLog['w1']) {\r\n                    this.data.spawnLog['w1'] = true;\r\n                    this.spawnCreep('worker', {'work': 1, 'move': 2, 'carry': 2});\r\n                }\r\n                if (this.controller.level == 2) {\r\n                    this.state = this.STATE_RCL2;\r\n                    this.data.spawnLog = {};\r\n                    this.printMsg('RCL reaches level 2');\r\n                }\r\n                break;\r\n            }\r\n            case this.STATE_RCL2: {\r\n                if (this.controller.level == 3) {\r\n                    this.state = this.STATE_RCL3;\r\n                    this.data.spawnLog = {};\r\n                    this.printMsg('RCL reaches level 3');\r\n                }\r\n                break;\r\n            }\r\n            case this.STATE_RCL3: {\r\n                if (this.controller.level == 4) {\r\n                    this.state = this.STATE_RCL4;\r\n                    this.data.spawnLog = {};\r\n                    this.printMsg('RCL reaches level 4');\r\n                }\r\n                break;\r\n            }\r\n            case this.STATE_RCL4: {\r\n                if (this.controller.level == 5) {\r\n                    this.state = this.STATE_RCL5;\r\n                    this.data.spawnLog = {};\r\n                    this.printMsg('RCL reaches level 5');\r\n                }\r\n                break;\r\n            }\r\n            case this.STATE_RCL5: {\r\n                if (this.controller.level == 6) {\r\n                    this.state = this.STATE_RCL6;\r\n                    this.data.spawnLog = {};\r\n                    this.printMsg('RCL reaches level 6');\r\n                }\r\n                break;\r\n            }\r\n            case this.STATE_RCL6: {\r\n                if (this.controller.level == 7) {\r\n                    this.state = this.STATE_RCL7;\r\n                    this.data.spawnLog = {};\r\n                    this.printMsg('RCL reaches level 7');\r\n                }\r\n                break;\r\n            }\r\n            case this.STATE_RCL7: {\r\n                if (this.controller.level == 8) {\r\n                    this.state = this.STATE_RCL8;\r\n                    this.data.spawnLog = {};\r\n                    this.printMsg('RCL reaches level 8');\r\n                }\r\n                break;\r\n            }\r\n            case this.STATE_RCL8: {\r\n                break;\r\n            }\r\n            default: {}\r\n        }\r\n    }\r\n}","import {Agent} from \"./agent\";\r\nimport {AgentPraetor} from \"./instance/praetor\";\r\n\r\nexport class Agents {\r\n\r\n    static praetor(ref: MemRef, roomName: string) {\r\n        return new AgentPraetor(true, ref, roomName);\r\n    }\r\n\r\n    static buildAgent(ref: MemRef, type: string): Agent {\r\n        switch (type) {\r\n            case 'praetor': {\r\n                return new AgentPraetor(false, ref);\r\n            }\r\n            default: {}\r\n        }\r\n    }\r\n}","import {ObjectProto} from '../protos'\r\nimport {Task, TaskMemory} from './task'\r\nimport {Tasks} from './tasks';\r\n\r\nexport interface TaskFlowMemory {\r\n    r: Array<Id<_HasId>>;\r\n    q: Array<Array<TaskMemory>>;\r\n}\r\n\r\nexport class TaskFlow extends ObjectProto {\r\n    protected _ref: MemRef;\r\n    protected _loadFlag: boolean;\r\n    protected _receivers: Array<any>;\r\n    protected _queue: Array<Array<Task>>;\r\n\r\n    constructor(isInit: boolean, ref: MemRef) {\r\n        super();\r\n        this._ref = ref;\r\n        this._loadFlag = false;\r\n        if (isInit) {\r\n            this._receivers = [];\r\n            this._queue = [[], [], []];\r\n            this.wb();\r\n        }\r\n    }\r\n\r\n    /*-------------------- Getter/Setter --------------------*/\r\n\r\n    get receivers(): any {\r\n        if (!this._loadFlag) {\r\n            this.load();\r\n            this._loadFlag = true;\r\n        }\r\n        return this._receivers;\r\n    }\r\n\r\n    get queue(): any {\r\n        if (!this._loadFlag) {\r\n            this.load();\r\n            this._loadFlag = true;\r\n        }\r\n        return this._queue;\r\n    }\r\n\r\n    /*------------------------ Method -----------------------*/\r\n\r\n    wb() {\r\n        let mem = derefMem(this._ref);\r\n        mem.r = [];\r\n        for (let rec of this._receivers) {\r\n            mem.r.push(rec.obj.id);\r\n        }\r\n        mem.q = [];\r\n        for (let i of this._queue) {\r\n            let temp = [];\r\n            for (let task of i) {\r\n                temp.push(task.zip())\r\n            }\r\n            mem.q.push(temp);\r\n        }\r\n    }\r\n\r\n    load() {\r\n        this._receivers = [];\r\n        this._queue = [[], [], []];\r\n        let mem = derefMem(this._ref);\r\n        for (let id of mem.r) {\r\n            this._receivers.push(getObjectInCache(true, id));\r\n        }\r\n        for (let i in mem.q) {\r\n            for (let t of mem.q[i]) {\r\n                this._queue[i].push(Tasks.buildTask(t));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Addd a receiver to the poor\r\n    addReceiver(receiver: any) {\r\n        this.receivers.push(receiver);\r\n    }\r\n\r\n    // Publish a task with a priority in 0-4 (smaller means higher)\r\n    pubTask(task: Task, prio: number) {\r\n        this.queue[prio].push(task);\r\n    }\r\n\r\n    // Issue all tasks\r\n    issue() {\r\n        for (let prio=0; prio<3; prio++) {\r\n            while (this.queue[prio][0]) {\r\n                let maxEval = -Infinity;\r\n                let idx = -1;\r\n                for (let i=0; i<this.receivers.length; i++) {\r\n                    if (!this.receivers[i].task) {\r\n                        let temp = this.queue[prio][0].eval(this.receivers[i].obj);\r\n                        if (temp > maxEval) {\r\n                            maxEval = temp;\r\n                            idx = i;\r\n                        }\r\n                    }\r\n                }\r\n                if (idx == -1) {\r\n                    return;\r\n                } else {\r\n                    this.receivers[idx].task = this.queue[prio].shift();\r\n                }\r\n            }\r\n        } \r\n    }\r\n\r\n    // Wrapper function\r\n    exe() {\r\n        this.issue();\r\n        for (let rec of this.receivers) {\r\n            rec.exe();\r\n        }\r\n    }\r\n}","/**\r\n * Caching data in global memory\r\n */\r\n\r\nimport {CreepWrapper} from \"../creep/creep\"\r\nimport {StructureWrapper} from \"../struct/struct\";\r\nimport {Structs} from \"../struct/structs\";\r\nimport {Agent} from \"../agent/agent\";\r\nimport {Agents} from \"../agent/agents\";\r\nimport {TaskFlow} from \"../task/taskFlow\";\r\n\r\nexport class Cache {\r\n    log: {[key: Id<_HasId>]: any};\r\n    global: {\r\n        struct: StructureTypes;\r\n        agent: {[name: string]: Agent};\r\n        taskFlow: {[name: string]: TaskFlow};\r\n    };\r\n    room: {\r\n        [key: string]: {\r\n            struct: StructureTypes;\r\n            agent: {[name: string]: Agent};\r\n            taskFlow: {[name: string]: TaskFlow};\r\n        };\r\n    };\r\n\r\n    constructor() {\r\n        this.log = {};\r\n        this.global = {\r\n            struct: getStructureTypes(),\r\n            agent: {},\r\n            taskFlow: {}\r\n        }\r\n        this.room = {};\r\n        // First initialize objects that have ID\r\n        // All Sreeps\r\n        for (let creepName in Game.creeps) {    \r\n            let creep = Game.creeps[creepName];\r\n            if (creep.memory.r) {\r\n                this.log[creep.id] = new CreepWrapper(false, creep.id);\r\n            }\r\n        }\r\n        // Global structures\r\n        for (let type in Memory.global.struct) {   \r\n            for (let idx in Memory.global.struct[type]) {\r\n                let struct = Structs.buildStruct(['global', 'struct', type, idx], type);\r\n                this.global.struct[type].push(struct);\r\n                this.log[struct.obj.id] = struct;\r\n            }\r\n        }\r\n        // Global agents\r\n        for (let name in Memory.global.agent) {\r\n            this.global.agent[name] = Agents.buildAgent(['global', 'agent', name], name);\r\n        }\r\n        // Global taskflows\r\n        for (let name in Memory.global.taskFlow) {\r\n            this.global.taskFlow[name] = new TaskFlow(false, ['global', 'taskFlow', name]);\r\n        }\r\n        for (let roomName in Memory.room) {\r\n            this.room[roomName] = {\r\n                struct: getStructureTypes(),\r\n                agent: {},\r\n                taskFlow: {}\r\n            };\r\n            // Room structures\r\n            for (let type in Memory.room[roomName].struct) {\r\n                for (let idx in Memory.room[roomName].struct[type]) {\r\n                    let struct = Structs.buildStruct(['room', roomName, 'struct', type, idx], type);\r\n                    this.room[roomName].struct[type].push(struct);\r\n                    this.log[struct.obj.id] = struct;\r\n                }\r\n            }\r\n            // Room sources (TODO: need a wrapper)\r\n            // for (let source of Memory.room[roomName].source) {\r\n            //     this.room[roomName].source.push(Game.getObjectById(source.id))\r\n            // }\r\n            // Room agents\r\n            for (let name in Memory.room[roomName].agent) {\r\n                this.room[roomName].agent[name] = Agents.buildAgent(['room', roomName, 'agent', name], name);\r\n            }\r\n            // Room taskflows\r\n            for (let name in Memory.room[roomName].taskFlow) {\r\n                this.room[roomName].taskFlow[name] = new TaskFlow(false, ['room', roomName, 'taskFlow', name]);\r\n            }\r\n        }\r\n    }\r\n\r\n    exe() {\r\n        for (let name in this.global.agent) {\r\n            this.global.agent[name].exe();\r\n        }\r\n        for (let type in this.global.struct) {\r\n            for (let struct of this.global.struct[type]) {\r\n                struct.exe();\r\n            }\r\n        }\r\n        for (let type in this.global.taskFlow) {\r\n            this.global.taskFlow[type].exe();\r\n        }\r\n        for (let roomName in this.room) {\r\n            let room = this.room[roomName];\r\n            for (let name in room.agent) {\r\n                room.agent[name].exe();\r\n            }\r\n            for (let type in room.struct) {\r\n                for (let struct of room.struct[type]) {\r\n                    struct.exe();\r\n                }\r\n            }\r\n            for (let type in room.taskFlow) {\r\n                room.taskFlow[type].exe();\r\n            }\r\n        }\r\n    }\r\n\r\n    writeBack() {\r\n        for (let name in this.global.agent) {\r\n            this.global.agent[name].wb();\r\n        }\r\n        for (let type in this.global.struct) {\r\n            for (let struct of this.global.struct[type]) {\r\n                struct.wb();\r\n            }\r\n        }\r\n        for (let type in this.global.taskFlow) {\r\n            this.global.taskFlow[type].wb();\r\n        }\r\n        for (let roomName in this.room) {\r\n            let room = this.room[roomName];\r\n            for (let name in room.agent) {\r\n                room.agent[name].wb();\r\n            }\r\n            for (let type in room.struct) {\r\n                for (let struct of room.struct[type]) {\r\n                    struct.wb();\r\n                }\r\n            }\r\n            for (let type in room.taskFlow) {\r\n                room.taskFlow[type].wb();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getStructureTypes() {\r\n    return { \r\n        spawn: [], extension: [], road: [], constructedWall: [], \r\n        rampart: [], keeperLair: [], portal: [], controller: [], \r\n        link: [], storage: [], tower: [], observer: [], powerBank: [], \r\n        powerSpawn: [], extractor: [], lab: [], terminal: [], \r\n        container: [], nuker: [], factory: [], invaderCore: []\r\n    };\r\n}\r\n\r\ninterface StructureTypes {\r\n    spawn: Array<StructureWrapper>;\r\n    extension: Array<StructureWrapper>;\r\n    road: Array<StructureWrapper>;\r\n    constructedWall: Array<StructureWrapper>;\r\n    rampart: Array<StructureWrapper>;\r\n    keeperLair: Array<StructureWrapper>;\r\n    portal: Array<StructureWrapper>;\r\n    controller: Array<StructureWrapper>;\r\n    link: Array<StructureWrapper>;\r\n    storage: Array<StructureWrapper>;\r\n    tower: Array<StructureWrapper>;\r\n    observer: Array<StructureWrapper>;\r\n    powerBank: Array<StructureWrapper>;\r\n    powerSpawn: Array<StructureWrapper>;\r\n    extractor: Array<StructureWrapper>;\r\n    lab: Array<StructureWrapper>;\r\n    terminal: Array<StructureWrapper>;\r\n    container: Array<StructureWrapper>;\r\n    nuker: Array<StructureWrapper>;\r\n    factory: Array<StructureWrapper>;\r\n    invaderCore: Array<StructureWrapper>;\r\n}\r\n","import {GlobalMemory, RoomMemory} from \"../type/memory\";\r\nimport {Structs} from \"../struct/structs\";\r\nimport {StructureMemory} from \"../struct/struct\";\r\nimport {Agents} from \"../agent/agents\";\r\nimport {TaskFlow} from \"@/task/taskFlow\";\r\n\r\nexport class Mem {\r\n\r\n    static MemInit() {\r\n        Memory.initFlag = true;\r\n        Memory.global = {\r\n            struct: {\r\n                spawn: [], extension: [], road: [], constructedWall: [],\r\n                rampart: [], keeperLair: [], portal: [], controller: [],\r\n                link: [], storage: [], tower: [], observer: [], powerBank: [],\r\n                powerSpawn: [], extractor: [], lab: [], terminal: [],\r\n                container: [], nuker: [], factory: [], invaderCore: []\r\n            },\r\n            agent: {},\r\n            taskFlow: {}\r\n        };\r\n        delete Memory.creeps;\r\n        delete Memory.spawns;\r\n        delete Memory.rooms;\r\n        delete Memory.flags;\r\n        Memory.room = {};\r\n        for (let roomName in Game.rooms) {\r\n            this.RoomMemInit(roomName, true);\r\n        }\r\n    }\r\n\r\n    static RoomMemInit(roomName: string, isColonyCenter: boolean) {\r\n        Memory.room[roomName] = {\r\n            struct: {\r\n                spawn: [], extension: [], road: [], constructedWall: [],\r\n                rampart: [], keeperLair: [], portal: [], controller: [],\r\n                link: [], storage: [], tower: [], observer: [], powerBank: [],\r\n                powerSpawn: [], extractor: [], lab: [], terminal: [],\r\n                container: [], nuker: [], factory: [], invaderCore: []\r\n            },\r\n            source: [],\r\n            agent: {},\r\n            taskFlow: {\r\n                harvester: {r: [], q: []},\r\n                worker: {r: [], q: []},\r\n                transporter: {r: [], q: []},\r\n                attacker: {r: [], q: []},\r\n                healer: {r: [], q: []}\r\n            },\r\n            data: {\r\n                nameIdx: {\r\n                    harvester: [],\r\n                    worker: [],\r\n                    transporter: [],\r\n                    attacker: [],\r\n                    healer: []\r\n                }\r\n            }\r\n        }\r\n        let roomMem = Memory.room[roomName];\r\n        let room = Game.rooms[roomName];\r\n        // Structures\r\n        for (let struct of room.find(FIND_MY_STRUCTURES)) {\r\n            roomMem.struct[struct.structureType].push(<StructureMemory>{});\r\n            Structs.createStruct(['room', roomName, 'struct', struct.structureType, roomMem.struct[struct.structureType].length-1], struct);\r\n        }\r\n        // Sources\r\n        for (let source of room.find(FIND_SOURCES)) {\r\n            roomMem.source.push({id: source.id, attach: 0});\r\n        }\r\n        // Agents\r\n        if (isColonyCenter) {\r\n            roomMem.agent['praetor'] = {t: null, r: null, tl: null, s: null, d: {}};\r\n            Agents.praetor(['room', roomName, 'agent', 'praetor'], roomName);\r\n            new TaskFlow(true, ['room', roomName, 'taskFlow', 'harvester']);\r\n            new TaskFlow(true, ['room', roomName, 'taskFlow', 'worker']);\r\n            new TaskFlow(true, ['room', roomName, 'taskFlow', 'transporter']);\r\n            new TaskFlow(true, ['room', roomName, 'taskFlow', 'attacker']);\r\n            new TaskFlow(true, ['room', roomName, 'taskFlow', 'healer']);\r\n        }\r\n    }\r\n\r\n}","import {errorMapper} from './test/errorMapper';\r\nimport './global';\r\nimport {Cache} from './cache/cache';\r\nimport {Mem} from './memory/mem';\r\n\r\n// export const loop = errorMapper(() => {\r\n//     let testObj: Zoo = new Zoo(['dog', 'cat'], ['doggy', 'catty'])\r\n//     console.log(testObj);\r\n// }, true)\r\n\r\nexport const loop = function() {\r\n\r\n    console.log('Tick ' + Game.time + ':');\r\n\r\n    // Initialize memory\r\n    if (!Memory.initFlag) {\r\n        Mem.MemInit();\r\n        console.log('[MESSAGE] Memory initialized');\r\n        // Memory.test = [];\r\n    }\r\n    \r\n    // Caching\r\n    if (!global.cache) {\r\n        global.cache = new Cache();\r\n        console.log('[MESSAGE] Global reset');\r\n    }\r\n\r\n    global.cache.exe();\r\n\r\n    global.cache.writeBack();\r\n}\r\n"],"names":[],"mappings":"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"}